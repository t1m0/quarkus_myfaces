package com.t1m0.quarkus.web.rest;


import java.util.HashMap;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.ForbiddenException;

import com.t1m0.quarkus.web.Page;
import com.t1m0.quarkus.web.UserService;
import com.t1m0.quarkus.web.model.User;
import com.t1m0.quarkus.web.persistence.UserRepository;
import org.apache.commons.lang3.StringUtils;

@ApplicationScoped
public class UserEndpoint implements UserService {

    @Inject
    private UserRepository userRepository;

    @Override
    public User save(User user) {
        if (StringUtils.isNotEmpty(user.getUuid())) {
            throw new ForbiddenException("Creating a user with an UUID is not allowed! The UUID will be generated by the backend.");
        }
        return userRepository.save(user);
    }

    @Override
    public User save(String uuid, User user) {
        return userRepository.save(user);
    }

    @Override
    public User find(String uuid) {
        return userRepository.find(uuid);
    }

    @Override
    public Page<User> findAll(int limit, int page) {
        return userRepository.findAll(limit, page, new HashMap<>(), new HashMap<>());
    }
}
